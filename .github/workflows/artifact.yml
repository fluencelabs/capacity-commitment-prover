name: "Build and publish ccp"

on:
  workflow_call:
    inputs:
      ref:
        type: string
        description: "git ref to publish"
        required: true
      image:
        type: string
        description: "ccp image name"
        default: "docker.fluence.dev/ccp"

jobs:
  build:
    name: "Build ccp (${{ matrix.arch }})"
    runs-on: ${{ matrix.runner }}
    timeout-minutes: 60

    env:
      RUSTFLAGS: "-D warnings -C link-arg=-B/usr/local/bin/mold"
      RUSTC_WRAPPER: "sccache"

    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: amd64
            target: x86_64-unknown-linux-gnu
            runner: linux-amd64-m-xlarge
          - arch: arm64
            target: aarch64-unknown-linux-gnu
            runner: linux-arm64-m-xlarge

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          repository: fluencelabs/capacity-commitment-prover
          ref: ${{ inputs.ref }}
          submodules: recursive

      - name: Setup Rust toolchain
        uses: dsherret/rust-toolchain-file@v1

      - name: Setup mold linker
        uses: rui314/setup-mold@v1
        with:
          make-default: false

      - name: Setup cache
        uses: Swatinem/rust-cache@v2
        with:
          cache-directories: ~/.cache/sccache
          shared-key: ccp-${{ matrix.arch }}
          # github allows only 10GB of cache
          # so save cache only on merge to master
          # to use less space and speed up CI
          save-if: ${{ github.event_name == 'push' }}

      - name: Setup sccache
        uses: mozilla-actions/sccache-action@v0.0.4

      - name: Run cargo build
        run: cargo build --release -p capacity-commitment-prover --target ${{ matrix.target }}

      - name: Upload ccp binary
        uses: actions/upload-artifact@v3
        with:
          name: ccp-${{ matrix.arch }}
          path: target/${{ matrix.target }}/release/ccp

  container:
    name: "Build container image"
    runs-on: ubuntu-latest
    timeout-minutes: 60

    needs: build

    permissions:
      contents: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          repository: fluencelabs/nox
          ref: ${{ inputs.ref }}

      - name: Import secrets
        uses: hashicorp/vault-action@v3.0.0
        with:
          url: https://vault.fluence.dev
          path: jwt/github
          role: ci
          method: jwt
          jwtGithubAudience: "https://github.com/fluencelabs"
          jwtTtl: 300
          secrets: |
            kv/hub.docker.com/fluencebot username | DOCKER_HUB_USERNAME ;
            kv/hub.docker.com/fluencebot password | DOCKER_HUB_PASSWORD ;
            kv/docker-registry/basicauth/ci username | DOCKER_USERNAME ;
            kv/docker-registry/basicauth/ci password | DOCKER_PASSWORD

      - name: Download binaries
        uses: actions/download-artifact@v3
        with:
          path: docker/binaries

      - name: Set build date
        run: echo "BUILD_DATE=$(date '+%Y-%m-%dT%H:%M:%S%:z')" >> $GITHUB_ENV

      - name: Generate snapshot version
        id: version
        uses: fluencelabs/github-actions/generate-snapshot-id@main

      - name: Construct artifacts names
        id: artifacts
        run: |
          if [[ ${{ inputs.image }} == "fluencelabs/ccp" ]]; then
            version="$(jq -r .[] .github/release-please/manifest.json)"
            echo "image=${{ inputs.image }}:${version}" >> "$GITHUB_OUTPUT"
          else
            echo "image=${{ inputs.image }}:${{ steps.version.outputs.id }}" >> "$GITHUB_OUTPUT"
          fi

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_HUB_USERNAME }}
          password: ${{ env.DOCKER_HUB_PASSWORD }}

      - name: Login to private container registry
        uses: docker/login-action@v3
        with:
          registry: docker.fluence.dev
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: Build and push container
        uses: docker/build-push-action@v5
        with:
          context: ./docker
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ steps.artifacts.outputs.image }}
          labels: |
            org.opencontainers.image.version=${{ inputs.ref }}
            org.opencontainers.image.created=${{ env.BUILD_DATE }}
            org.opencontainers.image.revision=${{ github.sha }}
